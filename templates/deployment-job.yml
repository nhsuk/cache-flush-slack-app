parameters:
  appName: ''             # name of the app
  appTest: ''             # must be 'running' or 'deployed'
  azureSubscription: ''   # the service connection in the pipeline
  environment: ''         # name of the environment in DevOps
  releaseEnvironment: ''  # env name for secret retrieval from Vault

jobs:
- job: validateParameters
  displayName: 'Validate template parameters'
  steps:
    - bash: $(System.DefaultWorkingDirectory)/scripts/validate-template-parameters.sh
      displayName: 'Validate template parameters'
      env:
        APP_NAME: ${{ parameters.appName }}
        APP_TEST: ${{ parameters.appTest }}
        AZURE_SUBSCRIPTION: ${{ parameters.azureSubscription }}
        ENVIRONMENT: ${{ parameters.environment }}
        VAULT_RELEASE_ENVIRONMENT: ${{ parameters.releaseEnvironment }}
- deployment: deployEnvironment
  displayName: 'Deploy environment'
  environment: ${{ parameters.environment }}
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    APP_NAME: ${{ parameters.appName }}
    ARTIFACT_PATH: $(System.DefaultWorkingDirectory)/$(ARTIFACT_NAME)
  strategy:
    runOnce:
      deploy:
        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifactName: $(ARTIFACT_NAME)
            targetPath: $(ARTIFACT_PATH)
        - task: ExtractFiles@1
          inputs:
            cleanDestinationFolder: false
        - bash: $(System.DefaultWorkingDirectory)/scripts/get-variables-from-vault.sh
          displayName: 'Get variables from Vault'
          env:
            VAULT_APP_NAME: $(VAULT_APP_NAME)
            VAULT_RELEASE_ENVIRONMENT: ${{ parameters.releaseEnvironment }}
            VAULT_TOKEN: $(VAULT_TOKEN)
        - task: AzureResourceGroupDeployment@2
          displayName: 'Create Or Update Resource Group'
          inputs:
            azureSubscription: ${{ parameters.azureSubscription }}
            csmFile: $(System.DefaultWorkingDirectory)/AzureResourceGroup/AzureDeploy.json
            location: $(LOCATION)
            overrideParameters: '-appPlan "$(APP_PLAN)" -appName "$(APP_NAME)" -location "$(LOCATION)"'
            resourceGroupName: $(RESOURCE_GROUP)
        - task: AzureFunctionApp@1
          displayName: 'Deploy function app'
          inputs:
            appName: $(APP_NAME)
            appSettings: '-access_token "$(access_token)" -client_secret "$(client_secret)" -client_token "$(client_token)" -host "$(host)" -WEBSITE_NODE_DEFAULT_VERSION $(WEBSITE_NODE_DEFAULT_VERSION)'
            appType: functionApp
            azureSubscription: ${{ parameters.azureSubscription }}
            package: $(ARTIFACT_PATH)/*.zip
        - ${{ if eq(parameters.appTest, 'deployed') }}:
          - bash: $(System.DefaultWorkingDirectory)/scripts/test-app-is-deployed.sh
            displayName: 'Test app is deployed'
            env:
              APP_SERVICE_HOST: $(AZUREFUNCTIONAPP.APPSERVICEAPPLICATIONURL)
        - ${{ if eq(parameters.appTest, 'running') }}:
          - bash: $(System.DefaultWorkingDirectory)/scripts/test-app-is-running.sh
            displayName: 'Test app is running'
            env:
              APP_SERVICE_HOST: $(AZUREFUNCTIONAPP.APPSERVICEAPPLICATIONURL)
              FUNCTION_KEY: $(FUNCTION_KEY)
